import menu from '/cypress/fixtures/Menu/Menu';
import * as interceptions from '../../interceptions/webUsers';

export const locators = {
    userSelectAllFolderPermissions: '[id$=":selectAllPermissions"]',
    userDeselectAllFolderPermissions: '[id$=":deselectAllPermissions"]',
    userConfirmPasswordInput: '[id$="manualPasswordPanel:value2"]',
    userGeneralFolders: '[id$=":folderPermissions"] > tbody',
    userSubFolders: '[id$=":subfolderPermissions"] > tbody',
    userPasswordInput: '[id$="manualPasswordPanel:value1"]',
    AuthenticationAlias: '[id$=":authenticationAlias"]',
    SpecifyThePassword: '[id$="generatePassword:1"]',
    webUserExpiresOnInput: '[id$="expiresOn_input"]',
    webUserImportChooseFile: '[id$="sourcePanel"]',
    userFilterByField: '[placeholder="User Name"]',
    addSelectedItemsButton: 'button[title="Add"]',
    pageTitle: '[id="headingToolbarlistwebusersOuter"]',
    userFeatures: '[id="featuresPanel"]',
    folderAlias: '[id$="folderAlias"]',
    ipFilterField: '[id $="display"]',
    folderPath: '[id$="path:input"]',
    nameInput: 'input[id$="name"]',
    saveButton: '[id="btnSave"]',
    selectTemplateDialog: 'div.ui-dialog.ui-widget[aria-hidden="false"]',
    selectMobileNumberCountry: '[id="addUserGrid:mobilePhone"]',
    mobilePhoneField: '[id="addUserGrid:mphone"]'
}

function openWebUsersPage() {
    cy.navigateToThePageByName(menu.menuItems.users.locator, menu.submenuItems.web_users);
    cy.verifyPageTitle(menu.submenuItems.web_users);
}

function addNewWebUser(userData, autoGeneratedName = true) {
    interceptions.addWebUsers();
    interceptions.listWebUsers();
    cy.get('span').contains('Add Web User').click();
    cy.wait('@listWebUsers').its('response.statusCode').should('equal', 200);
    cy.get('body').then((el) => {
        if (el.find(locators.selectTemplateDialog).length) {
            cy.get(locators.selectTemplateDialog).should('be.visible').then((dialog) => {
                cy.get(dialog.find('.ui-dialog-title'))
                    .should('be.visible')
                    .and('have.text', 'Choose Web User Template');
                cy.get(dialog.find('a[aria-label="Close"]')).should('be.visible');
                cy.get(dialog.find('.gfaces-field-label'))
                    .should('be.visible')
                    .and('have.text', 'Web User Template');
                cy.get(dialog.find('.ui-selectonemenu-trigger')).should('be.visible').click().then(() => {
                    cy.get('[id$="template_panel"]')
                        .should('be.visible')
                        .and('have.css', 'display', 'block')
                    cy.get(('.ui-selectonemenu-table')).should('be.visible').within(() => {
                        cy.get('.ui-state-default.Data')
                            .should('be.visible')
                            .and('have.text', 'Template Name');
                        cy.get(('tr[data-label = "' + userData.template + '"]')).should('be.visible').wait(500).click();
                    });
                });
                cy.get('span').contains('Continue').click();
            });
        }
    });

    if (userData.AddressBooks) {
        userData.AddressBooks.name.forEach((book) => {
            cy.get('li > a').contains('Address Books').should('be.visible').click();
            cy.get('ul > li').contains(book).should('be.visible').dblclick().then(() =>
                cy.get('li > a').contains('General').click()
            )
        })
    }

    if (userData.UserGroups) {
        userData.UserGroups.forEach((group) => {
            cy.get('li > a').contains('Groups').should('be.visible').click();
            cy.get('ul > li').contains(group).should('be.visible').dblclick().then(() =>
                cy.get('li > a').contains('General').click()
            )
        })
    }

    if (autoGeneratedName) {
        userData.username = "Random_User_" + Cypress._.random(0, 1e6);
    }
    cy.get(locators.nameInput).type(userData.username)

    if (userData.GeneralFields) {
        if (userData.GeneralFields.mphone) {
            cy.get(locators.selectMobileNumberCountry).click().get('li[id^="addUserGrid:mobilePhone"]').contains('Other(+)').scrollIntoView().click();
        }
        Object.keys(userData.GeneralFields).forEach((key) => {
            cy.get(`[id="addUserGrid:${key}"]`).click().type(userData.GeneralFields[key]);
        })

    }

    cy.get('li > a').contains('Authentication').click()
    if (userData.password == 'auto') {
        cy.get('td').contains('Generate a password').click()
    } else {
        cy.get('td').contains('Specify the password').click()
        cy.get(locators.userPasswordInput).type(userData.password)
        cy.get(locators.userConfirmPasswordInput).type(userData.password)

        userData.PasswordOptions.forEach((option) => {
            cy.get('span').contains(option, { matchCase: false }).click({ shiftKey: true });
        })
    }

    if (userData.AuthenticationAlias) {
        cy.get(locators.AuthenticationAlias).click().type(userData.AuthenticationAlias);
    }

    if (userData.Features) {
        cy.get('li > a').contains('Features').click()
        userData.Features.forEach((feature) => {
            cy.get(locators.userFeatures).contains(feature).click({ shiftKey: true });
        })
    }

    if (userData.GeneralFolders) {
        cy.get('li > a').contains('Folders').click()
        cy.get('#virtualFolderPanel\\:virtualFolderGrid\\:deselectAllPermissions').click();
        if (userData.GeneralFolders === "All") {
            cy.get(locators.userSelectAllFolderPermissions).click();
        } else {
            userData.GeneralFolders.forEach((folder) => {
                cy.get(locators.userGeneralFolders).contains(folder).click({ shiftKey: true });
            });
        }
    }

    if (userData.VirtualFolder) {
        cy.get('li > a').contains('Folders').click()
        userData.VirtualFolder.Folders.forEach((folder) => {
            cy.get('.ui-toolbar-group-right').children('button').contains('Add').click();
            cy.get(locators.folderAlias).should('have.focus').type(folder);
            cy.get(locators.folderPath).type('${homeDirectory}/' + folder, { parseSpecialCharSequences: false });

            if (userData.VirtualFolder[folder] == undefined) {
                cy.get(locators.userSelectAllFolderPermissions).click();

            } else {
                cy.get(locators.userDeselectAllFolderPermissions).click();
                userData.VirtualFolder[folder].forEach((folders) => {
                    cy.get(locators.userGeneralFolders).contains(folders).click({ shiftKey: true });
                });
            }

        });
    }

    if (userData.TimeLimits) {
        const TodaysDate = require('dayjs')
        cy.get('li > a').contains('Time Limits').should('be.visible').click();
        cy.get(locators.webUserExpiresOnInput).click().type(TodaysDate().add(userData.TimeLimits[0], 'day').format('MMM DD, YYYY'));
    }

    if (userData.IpFilter) {
        cy.get('li > a').contains('IP Filter').should('be.visible').click();
        cy.get('label').contains('Yes').should('be.visible').click();
        cy.get('label').contains(userData.IpFilter[0]).click();
        cy.get('div').contains('Add Filter Entry...').click();
        cy.get(locators.ipFilterField).should('be.visible').click();
        cy.get('span > span > input').type(userData.IpFilter[1]);
    }

    cy.get(locators.saveButton).click();
    cy.wait('@addWebUsers').its('response.statusCode').should('equal', 200);

}

function verifyWebUserCreated(userData, homeDir, ifEmailPasswordEnabled = false) {
    let messages = [
        `Web user '${userData.username}' was added successfully`,
        `The home directory '${homeDir}\\userdata\\webdocs\\${userData.username}' was created successfully for user '${userData.username}'`,
        `Password was set to: ${userData.password}`
    ]
    if (ifEmailPasswordEnabled) {
        messages.push(`Account information was successfully emailed to the web user and/or email addresses listed in the template`)
        messages.push(`Password was successfully emailed to the web user and/or email addresses listed in the template`)
    }

    if (userData.password === 'auto') {
        cy.getWebUserAutoGeneratedPassword().then((password) => {
            messages[2] = `Password was set to: ${password}`
        });
    }

    cy.verifySuccessMessages(messages)
    cy.get('[id="listWebUserSearchForm:webUserDataTable_data"]').within(() => {
        cy.get('.Data a').contains(userData.username).should('be.visible');
    });
}

function importWebUser(fileName, importType) {
    cy.get('span').contains('Import Web Users').click();
    cy.get('span').contains('Import from ' + importType).should('be.visible').click();
    cy.get('h1').contains('Import Web Users from ' + importType).should('be.visible');
    cy.uploadFile(fileName, importType);
    if (importType == "CSV") {
        cy.get('span').contains('Validate and Import').should('be.visible').click();
        cy.get('span').contains('Import').should('be.visible').click();
        cy.get('span').contains('Done').should('be.visible').click();
    } else {
        cy.get('span').contains('Import').click();
    }
}

function addFeatures(username, Features) {
    cy.selectMoreAction(username, 'Edit');
    cy.get('li > a').contains('Features').click();
    Features.forEach((feature) => {
        cy.get(locators.userFeatures).contains(feature).click({ shiftKey: true });
    })
    cy.get(locators.saveButton).click();
    cy.verifySuccessMessages(["Web user 'Test_User_CSV' was updated successfully"])
}

export default {
    openWebUsersPage,
    addNewWebUser,
    verifyWebUserCreated,
    importWebUser,
    addFeatures,
}
