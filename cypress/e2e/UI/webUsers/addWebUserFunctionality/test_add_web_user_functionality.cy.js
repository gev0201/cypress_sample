import webUsers from '/cypress/support/pages/webUsers/webUsersPage.js';
import MyProfile from '/cypress/support/pages/webClient/myProfile.js';
import LoginPage from '/cypress/support/pages/webClient/loginPage.js';
import webUserCommands from '/cypress/support/API/webUserCommands.js'
import serviceManagerPage from "../../../../support/pages/services/serviceManagerPage.js";
import {services} from "../../../../fixtures/Services/serviceNames.js";
import servicesCommands from "../../../../support/API/servicesCommands";

describe('test suite is implemented to test add web user functionality', () => {
    let userData;

    beforeEach('prepare user data, login to Admin UI and store install directory', () => {
        cy.fixture('WebUsers/allPermission').then(fixtureData => userData = fixtureData).then(() => {
            delete userData.IpFilter;
            delete userData.UserGroups;
            delete userData.VirtualFolder;
            delete userData.PasswordPolicy;
            delete userData.AddressBooks;
            delete userData.ProfileSettings;
            userData.Features = ["HTTPS"];
            servicesCommands.getServiceStatusThroughAPI(services.https.name).then((response) => {
                cy.login(Cypress.env('adminUserName'), Cypress.env('adminPassword'));
                if (response.body.data[0].status === "STOPPED") {
                    serviceManagerPage.openServiceManagerPage();
                    cy.startService(services.https.name);
                }
            });
            cy.getInstallDirectory().then((dir) => {
                cy.wrap(dir.text()).as('dir');
            });
        });
    });

    it('test case is implemented to verify the web user is created successfully', () => {
        webUsers.openWebUsersPage();
        webUsers.addNewWebUser(userData);
        cy.get('@dir').then((dir) => {
            webUsers.verifyWebUserCreated(userData, dir);
        });
    });

    it('test case is implemented to verify the web user is created with auto generated password', () => {
        userData.username = 'UserWithAutogeneratedPassword'
        userData.password = 'auto';
        webUsers.openWebUsersPage();
        webUsers.addNewWebUser(userData);
        cy.get('@dir').then((dir) => {
            webUsers.verifyWebUserCreated(userData, dir);
        });
    });

    it('test case is implemented to verify web user change password functionality', () => {
        userData.PasswordOptions = ['Allow User to Change Password'];
        userData.Features = ['HTTPS'];
        webUsers.openWebUsersPage();
        webUsers.addNewWebUser(userData);
        cy.get('@dir').then((dir) => {
            webUsers.verifyWebUserCreated(userData, dir);
        }).then(() => {
            cy.loginClient(userData.username, userData.password);
            MyProfile.WebClientChangePassword(userData);
            MyProfile.WebClientlogout();
            cy.loginClient(userData.username, userData.password);
        });
    });

    it('test case is implemented to verify web user force to change password on next logon functionality', () => {
        userData.Features = ['HTTPS'];
        userData.PasswordOptions = ['Force Password Change at Next Logon'];
        webUsers.openWebUsersPage();
        webUsers.addNewWebUser(userData);
        cy.get('@dir').then((dir) => {
            webUsers.verifyWebUserCreated(userData, dir);
        }).then(() => {
            cy.loginClient(userData.username, userData.password, false)
            cy.get('span').contains('Your password has expired').should('be.visible');
            LoginPage.ForcePasswordChange(userData);
            cy.loginClient(userData.username, userData.password);
        });
    });

    it('test case is implemented to verify create web user functionality with password expiration option', () => {
        userData.TimeLimits = "0";
        webUsers.openWebUsersPage();
        webUsers.addNewWebUser(userData);
        cy.get('@dir').then((dir) => {
            webUsers.verifyWebUserCreated(userData, dir);
        });
        cy.get('a').contains(userData.username).parentsUntil('tbody').children('td').contains('Expired');
    });

    it('test case is implemented to verify create web user functionality with "Email Password" option enabled', () => {
        userData.GeneralFields.email = "test@hs.com";
        userData.PasswordOptions = ['Email password'];
        webUsers.openWebUsersPage();
        webUsers.addNewWebUser(userData);
        cy.get('@dir').then((dir) => {
            webUsers.verifyWebUserCreated(userData, dir, true);
        });
        cy.task('getLastEmail', 'test@hs.com')
            .then((response) => {
                expect(response.receivers).deep.equal({'test@hs.com': true,});
                expect(response.data).contain('Subject: Account Created');
                expect(response.data).contain(userData.password);
            });
    });

    afterEach('Remove web user', () => {
        webUserCommands.deleteWebUser(userData.username);
    });
});